{"version":3,"sources":["containers/Autharizaton/Signup/SignUp.js"],"names":["SidnUp","useState","error","setError","history","useHistory","useFormHook","name","value","isVallid","email","isValid","password","state","onInputChange","onSubmitHandler","e","a","preventDefault","fetch","process","REACT_APP_BACKEND","method","body","JSON","stringify","inputs","headers","res","json","resData","ok","Error","message","replace","onErrorClosed","Fragment","onClose","title","className","id","element","type","label","validators","VALIDATION_REQUIRE","onInput","placeholder","errorText","VALIDATION_EMAIL","see","VALIDATION_MINLENGTH","disabled","onClick","to","border"],"mappings":"mRAyGeA,UA9Ff,WAAmB,IAAD,EACYC,mBAAS,MADrB,mBACPC,EADO,KACAC,EADA,KAERC,EAAUC,cAFF,EAGmBC,YAC7B,CACIC,KAAM,CACFC,MAAO,GACPC,UAAU,GAEdC,MAAO,CACHF,MAAO,GACPG,SAAS,GAEbC,SAAU,CACNJ,MAAO,GACPG,SAAS,KAGjB,GAfIE,EAHM,EAGNA,MAAOC,EAHD,EAGCA,cAkBTC,EAAe,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACpBD,EAAEE,iBADkB,kBAGEC,MAAM,GAAD,OAAIC,mHAAYC,kBAAhB,gBAAgD,CACnEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAClB,KAAMM,EAAMa,OAAOnB,KAAKC,MAAOE,MAAOG,EAAMa,OAAOhB,MAAMF,MAAOI,SAAUC,EAAMa,OAAOd,SAASJ,QACtHmB,QAAS,CACL,eAAgB,sBAPR,cAGVC,EAHU,gBAUMA,EAAIC,OAVV,UAUVC,EAVU,OAWZF,EAAIG,GAXQ,uBAaN,IAAIC,MAAMF,EAAQG,SAbZ,QAehB7B,EAAQ8B,QAAQ,eAfA,kDAkBhB/B,EAAS,KAAM8B,SAlBC,0DAAH,sDAqBfE,EAAgB,WAClBhC,EAAS,OAEb,OACI,kBAAC,IAAMiC,SAAP,KACClC,GAAS,kBAAC,IAAMkC,SAAP,KACN,kBAAC,IAAD,CAAUC,QAASF,IACnB,kBAAC,IAAD,CAAUG,MAAM,gBAAgBL,QAAS/B,EAAOmC,QAASF,KAE7D,kBAAC,IAAD,KACI,wBAAII,UAAU,kBAAd,UACA,0BAAMA,UAAU,eACZ,kBAAC,IAAD,CACIC,GAAG,OACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,OACNC,WAAY,CAACC,eACbC,QAAShC,EACTiC,YAAY,YACZC,UAAU,4BAEd,kBAAC,IAAD,CACIR,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,cAAsBI,eACnCH,QAAShC,EACTiC,YAAY,aACZC,UAAU,8BACd,kBAAC,IAAD,CACIR,GAAG,WACHC,QAAQ,QACRC,KAAK,WACLC,MAAM,WACNO,KAAG,EACHN,WAAY,CAACO,YAAqB,IAClCL,QAAShC,EACTiC,YAAY,gBACZC,UAAU,6CAGlB,yBAAKT,UAAU,sBACX,kBAAC,IAAD,CAAQa,UAAWvC,EAAMF,QAAS0C,QAAStC,GAA3C,UACA,kBAAC,IAAD,CAAQuC,GAAG,cAAcC,QAAM,GAA/B","file":"static/js/11.4ca114aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Auth from '../Auth/Auth';\r\nimport Input from '../../../shared/UIcomponents/Input/Input';\r\nimport { useFormHook } from '../../../shared/hooks/form-hooks';\r\nimport { VALIDATION_REQUIRE, VALIDATION_EMAIL, VALIDATION_MINLENGTH } from '../../../shared/util/Validation';\r\nimport Button from '../../../shared/UIcomponents/Buttons/Button';\r\nimport './SignUp.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport BackDrop from '../../../shared/UIcomponents/Backdrop/BackDrop';\r\nimport ModalEtc from '../../../shared/UIcomponents/Models/Modal_etc/Modal_etc';\r\n\r\nfunction SidnUp() {\r\n    const [error, setError] = useState(null);\r\n    const history = useHistory();\r\n    const { state, onInputChange } = useFormHook(\r\n        {\r\n            name: {\r\n                value: '',\r\n                isVallid: false\r\n            },\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    const onSubmitHandler = async (e) => { \r\n        e.preventDefault();\r\n        try{\r\n            const res = await fetch(`${process.env.REACT_APP_BACKEND}/user/signup`,{\r\n                method: \"POST\",\r\n                body: JSON.stringify({name: state.inputs.name.value, email: state.inputs.email.value, password: state.inputs.password.value}),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            const resData = await res.json()\r\n            if(!res.ok)\r\n            {\r\n                throw new Error(resData.message);\r\n            }\r\n            history.replace('/auth/login');\r\n        }\r\n        catch(error){\r\n            setError(error.message);\r\n        }\r\n    }\r\n    const onErrorClosed = () => {\r\n        setError(null);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n        {error && <React.Fragment>\r\n            <BackDrop onClose={onErrorClosed}/>\r\n            <ModalEtc title=\"Error Occured\" message={error} onClose={onErrorClosed}/>\r\n            </React.Fragment>}\r\n        <Auth>\r\n            <h1 className=\"Auth-Login__pg\">Signup</h1>\r\n            <form className=\"Auth-Signup\">\r\n                <Input\r\n                    id=\"name\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Name\"\r\n                    validators={[VALIDATION_REQUIRE()]}\r\n                    onInput={onInputChange}\r\n                    placeholder=\"Your Name\"\r\n                    errorText=\"Please enter your Name.\"\r\n                />\r\n                <Input\r\n                    id=\"email\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Email\"\r\n                    validators={[VALIDATION_REQUIRE(), VALIDATION_EMAIL()]}\r\n                    onInput={onInputChange}\r\n                    placeholder=\"Your Email\"\r\n                    errorText=\"Please enter valid Email.\" />\r\n                <Input\r\n                    id=\"password\"\r\n                    element=\"input\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    see\r\n                    validators={[VALIDATION_MINLENGTH(8)]}\r\n                    onInput={onInputChange}\r\n                    placeholder=\"Your Password\"\r\n                    errorText=\"Please enter valid Password(length>=8).\"\r\n                />\r\n            </form>\r\n            <div className=\"Auth-signup-button\">\r\n                <Button disabled={!state.isValid} onClick={onSubmitHandler}>Signup</Button>\r\n                <Button to=\"/auth/login\" border>Have An Account</Button>\r\n            </div>\r\n        </Auth>\r\n        </React.Fragment>\r\n    )\r\n;}\r\n\r\nexport default SidnUp\r\n"],"sourceRoot":""}