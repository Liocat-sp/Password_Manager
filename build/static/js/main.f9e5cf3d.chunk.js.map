{"version":3,"sources":["shared/context/auth-context.js","shared/UIcomponents/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","token","userId","login","logOut","Loader","className","logoutTime","Login","React","lazy","MainNavigation","SidnUp","Home","Locker","App","useState","setisLoggedIn","setuserId","settoken","expireAt","setExpireAt","useCallback","expire","expiraton","Date","getTime","localStorage","setItem","JSON","stringify","logout","useEffect","remaning","setTimeout","clearTimeout","Data","parse","getItem","fallback","Provider","value","path","exact","paht","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2HAAA,6CAEaA,EAAcC,wBAAc,CAACC,YAAY,EAAOC,MAAO,KAAMC,OAAQ,KAAMC,MAAO,aAAUC,OAAQ,gB,gCCFjH,0BASeC,IANf,WACI,OACI,yBAAKC,UAAU,a,8ICOnBC,E,uFANEC,EAAQC,IAAMC,MAAK,kBAAM,uDACzBC,EAAiBF,IAAMC,MAAK,kBAAM,iCAClCE,EAASH,IAAMC,MAAK,kBAAM,uDAC1BG,EAAOJ,IAAMC,MAAK,kBAAM,gCACxBI,EAASL,IAAMC,MAAK,kBAAM,iCAkEjBK,MA9Df,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACNhB,EADM,KACMiB,EADN,OAEeD,mBAAS,MAFxB,mBAENd,EAFM,KAEEgB,EAFF,OAGaF,mBAAS,MAHtB,mBAGNf,EAHM,KAGCkB,EAHD,OAImBH,mBAAS,MAJ5B,mBAINI,EAJM,KAIIC,EAJJ,KAKPlB,EAAQmB,uBAAY,SAACpB,EAAQD,EAAOsB,GACxCL,EAAUhB,GACViB,EAASlB,GACTgB,GAAc,GACd,IAAMO,EAAYD,GAAU,IAAIE,MAAK,IAAIA,MAAOC,UAAY,MAC5DL,EAAYG,GACZG,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,CAAE5B,OAAQA,EAAQD,MAAOA,EAAOsB,OAAQC,OACnF,IACGO,EAAST,uBAAY,WACzBJ,EAAU,MACVC,EAAS,MACTE,EAAY,MACZJ,GAAc,GACdU,aAAaC,QAAQ,OAAQ,QAC5B,IAkBH,OAjBAI,qBAAU,WACR,GAAI/B,GAASmB,EAAU,CACrB,IAAMa,EAAW,IAAIR,KAAKL,GAAUM,WAAY,IAAID,MAAOC,UAC3DnB,EAAa2B,WAAWH,EAAQE,QAGhCE,aAAa5B,KAEd,CAACa,EAAUnB,EAAO8B,IAErBC,qBAAU,WACR,IAAMI,EAAOP,KAAKQ,MAAMV,aAAaW,QAAQ,SACzCF,GAAQA,EAAKnC,OAAS,IAAIwB,KAAKW,EAAKb,QAAU,IAAIE,MACpDtB,EAAMiC,EAAKlC,OAAQkC,EAAKnC,MAAOmC,EAAKb,UAErC,CAACpB,IAGF,kBAAC,WAAD,CAAUoC,SAAU,kBAAClC,EAAA,EAAD,OAClB,kBAAC,IAAYmC,SAAb,CAAsBC,MAAO,CAAEzC,WAAYA,EAAYG,MAAOA,EAAOC,OAAQ2B,EAAQ7B,OAAQA,EAAQD,MAAOA,IAC1G,kBAAC,IAAD,KACE,kBAACU,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,qBACV,kBAAC5B,EAAD,OAEF,kBAAC,IAAD,CAAO4B,KAAK,eAAeC,OAAK,GAC9B,kBAAC/B,EAAD,OAEF,kBAAC,IAAD,CAAO8B,KAAK,cAAcC,OAAK,GAC7B,kBAACnC,EAAD,OAEF,kBAAC,IAAD,CAAOoC,KAAK,IAAID,OAAK,GACnB,kBAAC9B,EAAD,YCvDMgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9e5cf3d.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext({isLoggedIn: false, token: null, userId: null, login: () => {}, logOut: () => {}})","import React from 'react';\r\nimport './Loader.css'\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, Suspense, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { AuthContext } from './shared/context/auth-context';\nimport Loader from './shared/UIcomponents/Loader/Loader';\n\nconst Login = React.lazy(() => import('./containers/Autharizaton/Login/LogIn'));\nconst MainNavigation = React.lazy(() => import('./shared/Navigation/MainNavigation/MainNavigation'));\nconst SidnUp = React.lazy(() => import('./containers/Autharizaton/Signup/SignUp'));\nconst Home = React.lazy(() => import('./containers/Home/home'));\nconst Locker = React.lazy(() => import('./containers/Locker/Locker'));\n\nlet logoutTime;\n\nfunction App() {\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [userId, setuserId] = useState(null);\n  const [token, settoken] = useState(null);\n  const [expireAt, setExpireAt] = useState(null);\n  const login = useCallback((userId, token, expire) => {\n    setuserId(userId);\n    settoken(token);\n    setisLoggedIn(true);\n    const expiraton = expire || new Date(new Date().getTime() + 2 * 3600 * 1000);\n    setExpireAt(expiraton);\n    localStorage.setItem('Data', JSON.stringify({ userId: userId, token: token, expire: expiraton }));\n  }, [])\n  const logout = useCallback(() => {\n    setuserId(null);\n    settoken(null);\n    setExpireAt(null);\n    setisLoggedIn(false);\n    localStorage.setItem('Data', null);\n  }, []);\n  useEffect(() => {\n    if (token && expireAt) {\n      const remaning = new Date(expireAt).getTime() - new Date().getTime();\n      logoutTime = setTimeout(logout, remaning);\n    }\n    else {\n      clearTimeout(logoutTime);\n    }\n  }, [expireAt, token, logout]);\n\n  useEffect(() => {\n    const Data = JSON.parse(localStorage.getItem('Data'));\n    if (Data && Data.token && new Date(Data.expire) > new Date()) {\n      login(Data.userId, Data.token, Data.expire);\n    }\n  }, [login]);\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, login: login, logOut: logout, userId: userId, token: token }}>\n        <BrowserRouter>\n          <MainNavigation />\n          <Switch>\n            <Route path=\"/locker/:lockerId\">\n              <Locker />\n            </Route>\n            <Route path=\"/auth/signup\" exact>\n              <SidnUp />\n            </Route>\n            <Route path=\"/auth/login\" exact>\n              <Login />\n            </Route>\n            <Route paht=\"/\" exact>\n              <Home />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </AuthContext.Provider>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}